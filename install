#!/usr/bin/env python3
import os
from pathlib import Path

NEOVIM_LINUX_DEPS = [
    "ninja-build",
    "gettext",
    "libtool",
    "libtool-bin",
    "autoconf",
    "automake",
    "cmake",
    "g++",
    "pkg-config",
    "unzip",
    "curl",
    "doxygen",
]

LINUX_PACKAGES = [
    "ack",
    "bat",
    "fasd",
    "lsof",
    "ripgrep",
    "silversearcher-ag",
    "tig",
    "universal-ctags",
    *NEOVIM_LINUX_DEPS,
]


def log(msg):
    print(f"> {msg}")


def install_linux_packages():
    log("Running `apt update`")
    os.system("apt-get update -y")
    for package in LINUX_PACKAGES:
        log(f"Installing `{package}`")
        os.system(f"apt-get install -y {package}")
    log("Finished installing linux packages")


def install_fzf():
    log("Installing fzf")
    os.system("git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf")
    os.system("~/.fzf/install --key-bindings --completion --no-update-rc")
    log("Finished installing fzf")


def install_lazygit():
    log("Installing lazygit")
    os.system(
        'curl -Lo /tmp/lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/download/v0.37.0/lazygit_0.37.0_Linux_x86_64.tar.gz"'
    )
    os.system("tar xf /tmp/lazygit.tar.gz --directory=/tmp/")
    os.system("install /tmp/lazygit /usr/local/bin")
    log("Finished installing lazygit")


def install_neovim():
    log("Installing neovim")
    os.system(
        "git clone --depth 1 --branch v0.8.1 https://github.com/neovim/neovim /tmp/neovim"
    )
    os.system("cd /tmp/neovim && make CMAKE_BUILD_TYPE=RelWithDebInfo && make install")
    os.system("mkdir -p ~/.config/nvim/lua")
    os.system(
        "wget https://raw.githubusercontent.com/craigrosie/prefs/master/neovim/init.lua -O ~/.config/nvim/init.lua"
    )
    os.system(
        "wget https://raw.githubusercontent.com/craigrosie/prefs/master/neovim/lua/plugins.lua -O ~/.config/nvim/lua/plugins.lua"
    )
    os.system(
        "git clone --depth 1 https://github.com/wbthomason/packer.nvim /usr/local/share/nvim/site/pack/packer/start/packer.nvim"
    )
    # os.system("mkdir -p /neovenv")
    # os.system(
    #     "cd /neovenv && poetry new . && poetry add pynvim && poetry add debugpy && cd -"
    # )
    os.system(
        "sed -i 's/\\/Users\\/craigrosie\\/.pyenv\\/versions\\/neovim-3.11.0/\\/neovenv\\/.venv/g' ~/.config/nvim/init.lua"
    )
    os.system(
        "sed -i 's/~\\/.pyenv\\/versions\\/debugpy-3.11.0/\\/neovenv\\/.venv/g' ~/.config/nvim/init.lua"
    )
    log("Finished installing neovim")


def install_snippets():
    log("Installing snippets")
    os.system("mkdir -p ~/.config/nvim/custom_snippets")
    os.system(
        "wget https://raw.githubusercontent.com/craigrosie/prefs/master/vim/ultisnips/markdown.snippets -O ~/.config/nvim/custom_snippets/markdown.snippets"
    )
    os.system(
        "wget https://raw.githubusercontent.com/craigrosie/prefs/master/vim/ultisnips/python.snippets -O ~/.config/nvim/custom_snippets/python.snippets"
    )
    log("Finshed installing snippets")


def install_vundle():
    log("Installing vundle")
    os.system(
        "git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim"
    )
    log("Finished installing vundle")


def setup_neovenv(neovenv_path):
    log("Setting up /neovenv/")
    os.system("mkdir -p /neovenv")
    os.system(
        f"cd /neovenv && poetry new . && cp {neovenv_path}/poetry.toml /neovenv/ && poetry add pynvim && poetry add debugpy && cd -"
    )
    log("Finished setting up /neovenv/")


def install(dotfiles_dir_path: Path, dir_path: Path) -> None:
    install_fzf()
    install_linux_packages()
    install_neovim()
    install_snippets()
    install_lazygit()

    for entry in os.scandir(dir_path):
        entry_path = dir_path / entry.name
        entry_path_rel = entry_path.relative_to(dotfiles_dir_path)
        local_path = Path(Path.home() / entry_path_rel)
        if entry.is_dir():
            if not local_path.exists():
                local_path.mkdir()
            install(dotfiles_dir_path, entry_path)
        else:
            log(f"{entry_path_rel=}")
            log(f"{entry_path=}")
            log(f"{local_path=}")
            if local_path.name == ".bashrc":
                log(f"Executing `cat {entry_path} >> {local_path}`")
                os.system(f"cat {entry_path} >> {local_path}")
            else:
                local_path.symlink_to(entry_path)

    # Install vundle last because it requires .vimrc
    # NOTE: no longer installing vundle as I'm using neovim
    # install_vundle()


def main() -> None:
    dotfiles_dir_path = Path(__file__).parent / "dotfiles"
    neovenv_path = Path(__file__).parent / "neovenv"
    setup_neovenv(neovenv_path)
    install(dotfiles_dir_path, dotfiles_dir_path)


if __name__ == "__main__":
    main()
